# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import a3_pb2 as a3__pb2


class a3Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/a3/CreatePost',
                request_serializer=a3__pb2.post.SerializeToString,
                response_deserializer=a3__pb2.id.FromString,
                )
        self.CreateCommment = channel.unary_unary(
                '/a3/CreateCommment',
                request_serializer=a3__pb2.comment.SerializeToString,
                response_deserializer=a3__pb2.id.FromString,
                )
        self.Upvote = channel.unary_unary(
                '/a3/Upvote',
                request_serializer=a3__pb2.id.SerializeToString,
                response_deserializer=a3__pb2.empty_message.FromString,
                )
        self.Downvote = channel.unary_unary(
                '/a3/Downvote',
                request_serializer=a3__pb2.id.SerializeToString,
                response_deserializer=a3__pb2.empty_message.FromString,
                )
        self.GetPostContent = channel.unary_unary(
                '/a3/GetPostContent',
                request_serializer=a3__pb2.id.SerializeToString,
                response_deserializer=a3__pb2.post.FromString,
                )
        self.GetNComments = channel.unary_unary(
                '/a3/GetNComments',
                request_serializer=a3__pb2.comment_request.SerializeToString,
                response_deserializer=a3__pb2.comment_list.FromString,
                )


class a3Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCommment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upvote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Downvote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPostContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_a3Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=a3__pb2.post.FromString,
                    response_serializer=a3__pb2.id.SerializeToString,
            ),
            'CreateCommment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCommment,
                    request_deserializer=a3__pb2.comment.FromString,
                    response_serializer=a3__pb2.id.SerializeToString,
            ),
            'Upvote': grpc.unary_unary_rpc_method_handler(
                    servicer.Upvote,
                    request_deserializer=a3__pb2.id.FromString,
                    response_serializer=a3__pb2.empty_message.SerializeToString,
            ),
            'Downvote': grpc.unary_unary_rpc_method_handler(
                    servicer.Downvote,
                    request_deserializer=a3__pb2.id.FromString,
                    response_serializer=a3__pb2.empty_message.SerializeToString,
            ),
            'GetPostContent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPostContent,
                    request_deserializer=a3__pb2.id.FromString,
                    response_serializer=a3__pb2.post.SerializeToString,
            ),
            'GetNComments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNComments,
                    request_deserializer=a3__pb2.comment_request.FromString,
                    response_serializer=a3__pb2.comment_list.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'a3', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class a3(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/a3/CreatePost',
            a3__pb2.post.SerializeToString,
            a3__pb2.id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCommment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/a3/CreateCommment',
            a3__pb2.comment.SerializeToString,
            a3__pb2.id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Upvote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/a3/Upvote',
            a3__pb2.id.SerializeToString,
            a3__pb2.empty_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Downvote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/a3/Downvote',
            a3__pb2.id.SerializeToString,
            a3__pb2.empty_message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPostContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/a3/GetPostContent',
            a3__pb2.id.SerializeToString,
            a3__pb2.post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/a3/GetNComments',
            a3__pb2.comment_request.SerializeToString,
            a3__pb2.comment_list.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
